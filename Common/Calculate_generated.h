// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CALCULATE_CALCULATE_H_
#define FLATBUFFERS_GENERATED_CALCULATE_CALCULATE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace Calculate {

struct Data;
struct DataBuilder;

struct Data FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUMBER1 = 4,
    VT_NUMBER2 = 6,
    VT_OPERATOR_ = 8
  };
  int32_t number1() const {
    return GetField<int32_t>(VT_NUMBER1, 0);
  }
  int32_t number2() const {
    return GetField<int32_t>(VT_NUMBER2, 0);
  }
  uint8_t operator_() const {
    return GetField<uint8_t>(VT_OPERATOR_, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_NUMBER1, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMBER2, 4) &&
           VerifyField<uint8_t>(verifier, VT_OPERATOR_, 1) &&
           verifier.EndTable();
  }
};

struct DataBuilder {
  typedef Data Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_number1(int32_t number1) {
    fbb_.AddElement<int32_t>(Data::VT_NUMBER1, number1, 0);
  }
  void add_number2(int32_t number2) {
    fbb_.AddElement<int32_t>(Data::VT_NUMBER2, number2, 0);
  }
  void add_operator_(uint8_t operator_) {
    fbb_.AddElement<uint8_t>(Data::VT_OPERATOR_, operator_, 0);
  }
  explicit DataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Data> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Data>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Data> CreateData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t number1 = 0,
    int32_t number2 = 0,
    uint8_t operator_ = 0) {
  DataBuilder builder_(_fbb);
  builder_.add_number2(number2);
  builder_.add_number1(number1);
  builder_.add_operator_(operator_);
  return builder_.Finish();
}

inline const Calculate::Data *GetData(const void *buf) {
  return ::flatbuffers::GetRoot<Calculate::Data>(buf);
}

inline const Calculate::Data *GetSizePrefixedData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Calculate::Data>(buf);
}

inline bool VerifyDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Calculate::Data>(nullptr);
}

inline bool VerifySizePrefixedDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Calculate::Data>(nullptr);
}

inline void FinishDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Calculate::Data> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Calculate::Data> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Calculate

#endif  // FLATBUFFERS_GENERATED_CALCULATE_CALCULATE_H_
