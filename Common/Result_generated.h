// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RESULT_CALCULATE_H_
#define FLATBUFFERS_GENERATED_RESULT_CALCULATE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace Calculate {

struct Result;
struct ResultBuilder;

struct Result FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ResultBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESULT_NUMBER = 4
  };
  int32_t result_number() const {
    return GetField<int32_t>(VT_RESULT_NUMBER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_RESULT_NUMBER, 4) &&
           verifier.EndTable();
  }
};

struct ResultBuilder {
  typedef Result Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_result_number(int32_t result_number) {
    fbb_.AddElement<int32_t>(Result::VT_RESULT_NUMBER, result_number, 0);
  }
  explicit ResultBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Result> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Result>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Result> CreateResult(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t result_number = 0) {
  ResultBuilder builder_(_fbb);
  builder_.add_result_number(result_number);
  return builder_.Finish();
}

inline const Calculate::Result *GetResult(const void *buf) {
  return ::flatbuffers::GetRoot<Calculate::Result>(buf);
}

inline const Calculate::Result *GetSizePrefixedResult(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Calculate::Result>(buf);
}

inline bool VerifyResultBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Calculate::Result>(nullptr);
}

inline bool VerifySizePrefixedResultBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Calculate::Result>(nullptr);
}

inline void FinishResultBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Calculate::Result> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedResultBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Calculate::Result> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Calculate

#endif  // FLATBUFFERS_GENERATED_RESULT_CALCULATE_H_
