// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Calculate
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Data : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Data GetRootAsData(ByteBuffer _bb) { return GetRootAsData(_bb, new Data()); }
  public static Data GetRootAsData(ByteBuffer _bb, Data obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyData(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, DataVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Data __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Number1 { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Number2 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public byte Operator { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<Calculate.Data> CreateData(FlatBufferBuilder builder,
      int number1 = 0,
      int number2 = 0,
      byte @operator = 0) {
    builder.StartTable(3);
    Data.AddNumber2(builder, number2);
    Data.AddNumber1(builder, number1);
    Data.AddOperator(builder, @operator);
    return Data.EndData(builder);
  }

  public static void StartData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddNumber1(FlatBufferBuilder builder, int number1) { builder.AddInt(0, number1, 0); }
  public static void AddNumber2(FlatBufferBuilder builder, int number2) { builder.AddInt(1, number2, 0); }
  public static void AddOperator(FlatBufferBuilder builder, byte @operator) { builder.AddByte(2, @operator, 0); }
  public static Offset<Calculate.Data> EndData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Calculate.Data>(o);
  }
  public static void FinishDataBuffer(FlatBufferBuilder builder, Offset<Calculate.Data> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedDataBuffer(FlatBufferBuilder builder, Offset<Calculate.Data> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class DataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Number1*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Number2*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Operator*/, 1 /*byte*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
